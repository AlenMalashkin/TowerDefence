using System;
using UnityEngine;
using VavilichevGD.Utils.Timing;

public class TowerHealth : MonoBehaviour, IHealth
{
    public Action<int> OnTowerHealthValueChangedEvent;
    [SerializeField] private int maxTowerHealth;
    [SerializeField] private int regenerationByTimeTick;
    [SerializeField] private float regenerationTime;
        
    public int MaxTowerHealth => maxTowerHealth;
    public bool IsRegenerating => _isRegenerating;
    
    private bool _isRegenerating = false;

    private int _currentTowerHealth;

    private SyncedTimer _timer;
    
    private void Awake()
    {
        _currentTowerHealth = maxTowerHealth;
    }

    private void OnEnable()
    {
        _timer = new SyncedTimer(TimerType.OneSecTick);

        _timer.TimerValueChanged += RegenerateEveryUpdateTick;
        _timer.TimerFinished += StopRegenerating;
    }

    private void OnDisable()
    {
        _timer.TimerValueChanged -= RegenerateEveryUpdateTick;
        _timer.TimerFinished -= StopRegenerating;
    }

    public void TakeDamage(int damage)
    {
        _currentTowerHealth -= damage;

        OnTowerHealthValueChangedEvent?.Invoke(_currentTowerHealth);
        
        if (_currentTowerHealth <= 0)
            DestroyTower();
    }

    public void Regenerate()
    {
        _timer.Start(regenerationTime);
        _isRegenerating = true;
    }

    private void RegenerateEveryUpdateTick(float time, TimeChangingSource source)
    {
        if (_currentTowerHealth < maxTowerHealth)
            _currentTowerHealth += regenerationByTimeTick;
        
        OnTowerHealthValueChangedEvent?.Invoke(_currentTowerHealth);
        Debug.Log("Regenerated by 5");
    }

    private void StopRegenerating()
    {
        _isRegenerating = false;
    }
    
    private void DestroyTower()
    {
        Destroy(gameObject);
    }
}
